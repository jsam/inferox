name: PR Checks

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Quick checks that fail fast
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    
    - name: Check formatting
      run: make format-check

  lint:
    name: Clippy Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry/index
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-build-
    
    - name: Run Clippy
      run: make ci-lint

  # Main test suite
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry/index
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-
    
    - name: Run tests
      run: make ci-test
    
    - name: Run doctests
      run: cargo test --doc

  # Build model libraries
  models:
    name: Build Model Libraries
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry/index
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-models-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-models-
    
    - name: Build model libraries
      run: make models
    
    - name: Verify model binaries exist
      run: |
        test -f target/release/libmlp_classifier.so || test -f target/release/libmlp_classifier.dylib
        test -f target/release/libmlp_small.so || test -f target/release/libmlp_small.dylib

  # Build documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry/index
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-doc-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-doc-
    
    - name: Build documentation
      run: cargo doc --no-deps
      env:
        RUSTDOCFLAGS: -D warnings

  # Verify examples compile
  examples:
    name: Examples
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry/index
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-examples-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-examples-
    
    - name: Build examples
      run: make examples
    
    - name: Run example tests
      run: make test-examples

  # Coverage check
  coverage:
    name: Coverage Check
    runs-on: ubuntu-latest
    env:
      # Force non-AVX path so pulp doesn't compile the failing code path.
      RUSTFLAGS: "-C target-feature=-avx,-avx2"
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq bc
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry/index
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-coverage-
    
    - name: Run coverage check
      run: make coverage-check
    
    - name: Comment on PR about coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const coverage = JSON.parse(fs.readFileSync('target/coverage/tarpaulin-report.json', 'utf8'));
            const coveragePercent = coverage.coverage.toFixed(1);
            const threshold = 65.0;
            const status = coveragePercent >= threshold ? '‚úÖ' : '‚ö†Ô∏è';
            
            const body = `## ${status} Coverage Report
            
            **Overall Coverage: ${coveragePercent}%** (Threshold: ${threshold}%)
            
            ${coveragePercent >= threshold ? 'Coverage meets requirements!' : 'Coverage is below threshold but not blocking.'}
            
            üìä [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          } catch (error) {
            console.log('Could not post coverage comment:', error.message);
          }

  # Summary job that depends on all checks
  pr-checks-complete:
    name: All PR Checks Passed
    runs-on: ubuntu-latest
    needs: [format, lint, test, models, docs, examples, coverage]
    if: always()
    steps:
    - name: Check results
      run: |
        if [[ "${{ needs.format.result }}" == "failure" ]] || \
           [[ "${{ needs.lint.result }}" == "failure" ]] || \
           [[ "${{ needs.test.result }}" == "failure" ]] || \
           [[ "${{ needs.models.result }}" == "failure" ]] || \
           [[ "${{ needs.docs.result }}" == "failure" ]] || \
           [[ "${{ needs.examples.result }}" == "failure" ]]; then
          echo "‚ùå One or more checks failed"
          exit 1
        fi
        
        # Coverage is informational only - doesn't fail PR
        if [[ "${{ needs.coverage.result }}" == "failure" ]]; then
          echo "‚ö†Ô∏è  Coverage check failed (informational only)"
        fi
        
        echo "‚úÖ All PR checks passed!"
